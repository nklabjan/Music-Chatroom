#!/usr/bin/env node
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
//var handlers = require('../chatroom/auth')


var Chatroom = require('../chatroom/Chatroom.js')


/**
 * Get port from environment and store in Express.
 */

/**
 * Should move this into its own thing later
 */



var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);
app.locals.io = io;
var fake_news = { loungeMasterName: "admin",
                  loungeMasterID: "admin",
                  name: "test room",
                  desc: "this is random crap that i'm writing",
                  genres: "toddler rock"
                  }
var master_chatroom = new Chatroom.Chatroom(io, 0, fake_news);

//Store client information
var chatrooms = app.locals.chatrooms; //So that it can be accessed by other ports
//app.locals.chatrooms keeps track of all the chatrooms
chatrooms[0] = master_chatroom;

var idCounter = app.locals.idCounter;

io.on('connection', function(socket) {

    //Handle create lounge in here too
    socket.on('user_connected', function(accessToken, loungeID) {
      //TODO: REMOVE THIS SHIT
      if (loungeID == null)
      {
        //use chatrooms.length for the id and append to the list
        var new_id = idCounter;
        var new_chatroom = new Chatroom.Chatroom(io, new_id, socket.id);
        chatrooms[new_id] = new_chatroom;
        socket.join(new_id)

        //Only increment when new chatroom is created
        idCounter++;
        chatrooms[new_id].userConnected(socket, accessToken);
        //handle error
        console.log("room does not exist.");
      }
      else
      {
        socket.join(loungeID)
        chatrooms[loungeID].userConnected(socket,accessToken);
        console.log("existing room joined");

      }
    });

    socket.on('user_disconnected', function(accessToken, loungeID) {
      if (chatrooms[loungeID] !== undefined)
      {
        chatrooms[loungeID].userDisconnected(socket, accessToken);
      }
      else {
        console.log("Disconnecting error")
      }
    });

    socket.on('message_sent', function(msg, accessToken, loungeID) {
        if (chatrooms[loungeID] !== undefined)
        {
          chatrooms[loungeID].chatMessage(socket, msg);
        }
        else {
          console.log("Message sent in non-existing chatroom")
        }
    });

    socket.on('play_song', function(access_token, deviceId, spotify_uri, loungeID) {
      if (chatrooms[loungeID] !== undefined)
      {
        chatrooms[loungeID].playSong(access_token, deviceId, spotify_uri);
      }
      else {
        console.log("Music attempted to be played in non-existing chatroom")
      }
    });

}

     )

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
